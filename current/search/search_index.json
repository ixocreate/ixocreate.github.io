{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"IXOCREATE Documentation"},{"location":"getting-started/","text":"Setup Installing IXOCREATE To create a new IXOCREATE application make sure you have Composer installed on your machine and you are using PHP 7.1 or newer. Create a new project by running this command in your terminal: $ composer create-project ixocreate/ixocreate project_name $ cd project_name Configuration Directory permissions The directory data should be writable by your web server. Database Before you continue with the setup instruction publish all available migrations by running following in your terminal: php ixocreate publish:run migration Create a new database on your mysql server - you will need the database name and credentials later. Web server configuration You should configure your web server's document_root to be the public directory. The index.php in this directory serves as entering point for all HTTP requests. PHP's internal web server One way to develop your IXOCREATE application is to use PHP's internal web server. cd public php -S localhost:8000 Apache The minimum configuration to get your application running under Apache is: Options +FollowSymLinks -Indexes RewriteEngine On RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L] Nginx The minimum configuration to get your application running under Nginx is: location / { try_files $uri $uri/ /index.php?$query_string; } Project setup $ php ixocreate setup The setup console command will guide you through the basic settings needed to run the application. $ php ixocreate admin:create-user your_email admin Afterwards you can surf to the administration interface by surfing to project_url /admin Creating PageType HomePageType declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class HomePageType implements RootPageTypeInterface, HandlePageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'home'; } public function label(): string { return 'Home'; } public function template(): string { return page::home ; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } } DefaultPageType declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class DefaultPageType implements RootPageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'default'; } public function label(): string { return 'Default'; } public function template(): string { return page::default ; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } } Creating Block Templates","title":"Setup"},{"location":"getting-started/#setup","text":"","title":"Setup"},{"location":"getting-started/#installing-ixocreate","text":"To create a new IXOCREATE application make sure you have Composer installed on your machine and you are using PHP 7.1 or newer. Create a new project by running this command in your terminal: $ composer create-project ixocreate/ixocreate project_name $ cd project_name","title":"Installing IXOCREATE"},{"location":"getting-started/#configuration","text":"","title":"Configuration"},{"location":"getting-started/#directory-permissions","text":"The directory data should be writable by your web server.","title":"Directory permissions"},{"location":"getting-started/#database","text":"Before you continue with the setup instruction publish all available migrations by running following in your terminal: php ixocreate publish:run migration Create a new database on your mysql server - you will need the database name and credentials later.","title":"Database"},{"location":"getting-started/#web-server-configuration","text":"You should configure your web server's document_root to be the public directory. The index.php in this directory serves as entering point for all HTTP requests.","title":"Web server configuration"},{"location":"getting-started/#phps-internal-web-server","text":"One way to develop your IXOCREATE application is to use PHP's internal web server. cd public php -S localhost:8000","title":"PHP's internal web server"},{"location":"getting-started/#apache","text":"The minimum configuration to get your application running under Apache is: Options +FollowSymLinks -Indexes RewriteEngine On RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L]","title":"Apache"},{"location":"getting-started/#nginx","text":"The minimum configuration to get your application running under Nginx is: location / { try_files $uri $uri/ /index.php?$query_string; }","title":"Nginx"},{"location":"getting-started/#project-setup","text":"$ php ixocreate setup The setup console command will guide you through the basic settings needed to run the application. $ php ixocreate admin:create-user your_email admin Afterwards you can surf to the administration interface by surfing to project_url /admin","title":"Project setup"},{"location":"getting-started/#creating-pagetype","text":"","title":"Creating PageType"},{"location":"getting-started/#homepagetype","text":"declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class HomePageType implements RootPageTypeInterface, HandlePageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'home'; } public function label(): string { return 'Home'; } public function template(): string { return page::home ; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } }","title":"HomePageType"},{"location":"getting-started/#defaultpagetype","text":"declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class DefaultPageType implements RootPageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'default'; } public function label(): string { return 'Default'; } public function template(): string { return page::default ; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } }","title":"DefaultPageType"},{"location":"getting-started/#creating-block","text":"","title":"Creating Block"},{"location":"getting-started/#templates","text":"","title":"Templates"},{"location":"components/blocks/","text":"","title":"Blocks"},{"location":"components/cache/","text":"","title":"Cache"},{"location":"components/collection/","text":"","title":"Collection"},{"location":"components/command-bus/","text":"","title":"Command Bus"},{"location":"components/events/","text":"","title":"Events"},{"location":"components/page-types/","text":"","title":"Page Types"},{"location":"components/resources/","text":"","title":"Resources"},{"location":"components/schema/","text":"Introduction The schema is the bridge between the visual interface and internal types. It defines and structures elements. Form Schema Audio use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\AudioElement; /** @var BuilderInterface $builder */ $builder- create(AudioElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false) Block use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\BlockContainerElement; /** @var BuilderInterface $builder */ $builder- create(BlockContainerElement::class, 'name') - withBlocks(['block1', 'block2']) - withLimit(1); Checkbox use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CheckboxElement; /** @var BuilderInterface $builder */ $builder- create(CheckboxElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false) Collection use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CollectionElement; use Ixocreate\\Schema\\Elements\\ImageElement; use Ixocreate\\Schema\\Elements\\TextElement; /** @var BuilderInterface $builder */ $builder- create(CollectionElement::class, 'name') - addCollectionElement( 'repeatable1', 'Repeatable1', (new Schema()) - withAddedElement( $builder- create(ImageElement::class, 'image') - withLabel('Image') ) - withAddedElement( $builder- create(TextElement::class, 'text') - withLabel('Text') ) ) - addCollectionElement( 'repeatable2', 'Repeatable2', (new Schema()) - withAddedElement( $builder- create(TextElement::class, 'text') - withLabel('Text') ) ); Color use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\ColorElement; /** @var BuilderInterface $builder */ $builder- create(ColorElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false) Date use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateElement; /** @var BuilderInterface $builder */ $builder- create(DateElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false) DateTime use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateTimeElement; /** @var BuilderInterface $builder */ $builder- create(DateTimeElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false) Document use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DocumentElement; /** @var BuilderInterface $builder */ $builder- create(DocumentElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false) Group Html Image Link Map Media Multicheckbox Multiselect Number Price Radio Schema Section Select Tabbed Groups Textarea Text Video YouTube List Schema Checkbox Date DateTime Media Select Text","title":"Schema"},{"location":"components/schema/#introduction","text":"The schema is the bridge between the visual interface and internal types. It defines and structures elements.","title":"Introduction"},{"location":"components/schema/#form-schema","text":"","title":"Form Schema"},{"location":"components/schema/#audio","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\AudioElement; /** @var BuilderInterface $builder */ $builder- create(AudioElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false)","title":"Audio"},{"location":"components/schema/#block","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\BlockContainerElement; /** @var BuilderInterface $builder */ $builder- create(BlockContainerElement::class, 'name') - withBlocks(['block1', 'block2']) - withLimit(1);","title":"Block"},{"location":"components/schema/#checkbox","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CheckboxElement; /** @var BuilderInterface $builder */ $builder- create(CheckboxElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false)","title":"Checkbox"},{"location":"components/schema/#collection","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CollectionElement; use Ixocreate\\Schema\\Elements\\ImageElement; use Ixocreate\\Schema\\Elements\\TextElement; /** @var BuilderInterface $builder */ $builder- create(CollectionElement::class, 'name') - addCollectionElement( 'repeatable1', 'Repeatable1', (new Schema()) - withAddedElement( $builder- create(ImageElement::class, 'image') - withLabel('Image') ) - withAddedElement( $builder- create(TextElement::class, 'text') - withLabel('Text') ) ) - addCollectionElement( 'repeatable2', 'Repeatable2', (new Schema()) - withAddedElement( $builder- create(TextElement::class, 'text') - withLabel('Text') ) );","title":"Collection"},{"location":"components/schema/#color","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\ColorElement; /** @var BuilderInterface $builder */ $builder- create(ColorElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false)","title":"Color"},{"location":"components/schema/#date","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateElement; /** @var BuilderInterface $builder */ $builder- create(DateElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false)","title":"Date"},{"location":"components/schema/#datetime","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateTimeElement; /** @var BuilderInterface $builder */ $builder- create(DateTimeElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false)","title":"DateTime"},{"location":"components/schema/#document","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DocumentElement; /** @var BuilderInterface $builder */ $builder- create(DocumentElement::class, 'name') - withLabel( Title ) - withDescription( Description ) - withRequired(true) - withDisabled(false)","title":"Document"},{"location":"components/schema/#group","text":"","title":"Group"},{"location":"components/schema/#html","text":"","title":"Html"},{"location":"components/schema/#image","text":"","title":"Image"},{"location":"components/schema/#link","text":"","title":"Link"},{"location":"components/schema/#map","text":"","title":"Map"},{"location":"components/schema/#media","text":"","title":"Media"},{"location":"components/schema/#multicheckbox","text":"","title":"Multicheckbox"},{"location":"components/schema/#multiselect","text":"","title":"Multiselect"},{"location":"components/schema/#number","text":"","title":"Number"},{"location":"components/schema/#price","text":"","title":"Price"},{"location":"components/schema/#radio","text":"","title":"Radio"},{"location":"components/schema/#schema","text":"","title":"Schema"},{"location":"components/schema/#section","text":"","title":"Section"},{"location":"components/schema/#select","text":"","title":"Select"},{"location":"components/schema/#tabbed-groups","text":"","title":"Tabbed Groups"},{"location":"components/schema/#textarea","text":"","title":"Textarea"},{"location":"components/schema/#text","text":"","title":"Text"},{"location":"components/schema/#video","text":"","title":"Video"},{"location":"components/schema/#youtube","text":"","title":"YouTube"},{"location":"components/schema/#list-schema","text":"","title":"List Schema"},{"location":"components/schema/#checkbox_1","text":"","title":"Checkbox"},{"location":"components/schema/#date_1","text":"","title":"Date"},{"location":"components/schema/#datetime_1","text":"","title":"DateTime"},{"location":"components/schema/#media_1","text":"","title":"Media"},{"location":"components/schema/#select_1","text":"","title":"Select"},{"location":"components/schema/#text_1","text":"","title":"Text"},{"location":"components/servicemanager/","text":"","title":"Servicemanager"},{"location":"concept/request-lifecycle/","text":"","title":"Request Lifecycle"},{"location":"concept/types/","text":"","title":"Types"},{"location":"getting-started/block/","text":"Introduction A block selft-contained certain type of content and representation of this content. A block defines which information an editor has or can provide and displays them respectively. Example Block A basic block (with a title and WYSIWYG Editor formatted content) might look like this: declare(strict_types=1); namespace App\\Block; use Ixocreate\\Cms\\Block\\BlockInterface; use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\SchemaInterface; use Ixocreate\\Schema\\Elements\\HtmlElement; use Ixocreate\\Schema\\Elements\\TextElement; use Ixocreate\\Schema\\Schema; class TextBlock implements BlockInterface { public function template(): string { return 'block::text'; } public function label(): string { return 'Text'; } public static function serviceName(): string { return 'text'; } public function receiveSchema(BuilderInterface $builder, array $options = []): SchemaInterface { return (new Schema())- withElements([ $builder- create(TextElement::class, 'title') - withLabel('Title'), $builder- create(HtmlElement::class, 'text') - withLabel('Text') - withRequired(true) ]); } }","title":"Create Blocks"},{"location":"getting-started/block/#introduction","text":"A block selft-contained certain type of content and representation of this content. A block defines which information an editor has or can provide and displays them respectively.","title":"Introduction"},{"location":"getting-started/block/#example-block","text":"A basic block (with a title and WYSIWYG Editor formatted content) might look like this: declare(strict_types=1); namespace App\\Block; use Ixocreate\\Cms\\Block\\BlockInterface; use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\SchemaInterface; use Ixocreate\\Schema\\Elements\\HtmlElement; use Ixocreate\\Schema\\Elements\\TextElement; use Ixocreate\\Schema\\Schema; class TextBlock implements BlockInterface { public function template(): string { return 'block::text'; } public function label(): string { return 'Text'; } public static function serviceName(): string { return 'text'; } public function receiveSchema(BuilderInterface $builder, array $options = []): SchemaInterface { return (new Schema())- withElements([ $builder- create(TextElement::class, 'title') - withLabel('Title'), $builder- create(HtmlElement::class, 'text') - withLabel('Text') - withRequired(true) ]); } }","title":"Example Block"},{"location":"getting-started/directory-structure/","text":"Root directory The bootstrap directory This directory houses all bootstrap relevant information and configurations for your application. For environment specific configurations you can use the local directory. The data directory The data directory contains your file based cached as well as any editorial file. This directory will be created by the application (if not yet created) and isn't commited to git. Therefor you might need to create this directory manually (in case of permission problems) and ensure it is writable by your web server. The public directory The public directory contains the index.php file, which is the HTTP entry point for your application. You might want to symlink your assets such as images, JavaScript, and CSS as well as your editorial media. The resources directory The resource directory contains some varying files which are needed by the application like migration files, raw assets (SASS, LESS, TypeScript etc.). Moreover it is the default location for generated php files for performance optimization such as generated factories and proxy classes. The src directory The src directory contains the source code of your application. See the section below for more detailed information. The templates directory This directory contains all your template files. The tests directory The tests directory contains your phpunit tests. The vendor directory The vendor directory contains all installed composer dependencies. Source (src) directory This directory contains by default two directories: App and Admin . In most cases you will only work with App but in some cases you might want to add only Admin-relevant classes into the Admin directory. Every class inside the following directories is added automatically into the servicemanager as long the respectively interface is implemented. The Action directory Available for App and Admin . Classes need to implement \\Psr\\Http\\Server\\MiddlewareInterface The Block directory Available for App . Classes need to implement \\Ixocreate\\Cms\\Block\\BlockInterface The Console directory Available for App and Admin . Classes need to implement \\Ixocreate\\Application\\Console\\CommandInterface The Image directory Available for App . Classes need to implement \\Ixocreate\\Media\\ImageDefinitionInterface The Media directory Available for App . Classes need to implement \\Ixocreate\\Media\\Handler\\HandlerInterface The Middleware directory Available for App and Admin . Classes need to implement \\Psr\\Http\\Server\\MiddlewareInterface The PageType directory Available for App . Classes need to implement \\Ixocreate\\Cms\\PageType\\PageTypeInterface The Registry directory Available for Admin . Classes need to implement \\Ixocreate\\Registry\\RegistryEntryInterface The Repository directory Available for App and Admin . Classes need to implement \\Ixocreate\\Database\\Repository\\RepositoryInterface The Resource directory Available for App and Admin . Classes need to implement \\Ixocreate\\Resource\\ResourceInterface The Subscriber directory Available for App . Classes need to implement \\Ixocreate\\Event\\Subscriber\\SubscriberInterface The Type directory Available for App and Admin . Classes need to implement \\Ixocreate\\Type\\TypeInterface","title":"Directory Structure"},{"location":"getting-started/directory-structure/#root-directory","text":"","title":"Root directory"},{"location":"getting-started/directory-structure/#the-bootstrap-directory","text":"This directory houses all bootstrap relevant information and configurations for your application. For environment specific configurations you can use the local directory.","title":"The bootstrap directory"},{"location":"getting-started/directory-structure/#the-data-directory","text":"The data directory contains your file based cached as well as any editorial file. This directory will be created by the application (if not yet created) and isn't commited to git. Therefor you might need to create this directory manually (in case of permission problems) and ensure it is writable by your web server.","title":"The data directory"},{"location":"getting-started/directory-structure/#the-public-directory","text":"The public directory contains the index.php file, which is the HTTP entry point for your application. You might want to symlink your assets such as images, JavaScript, and CSS as well as your editorial media.","title":"The public directory"},{"location":"getting-started/directory-structure/#the-resources-directory","text":"The resource directory contains some varying files which are needed by the application like migration files, raw assets (SASS, LESS, TypeScript etc.). Moreover it is the default location for generated php files for performance optimization such as generated factories and proxy classes.","title":"The resources directory"},{"location":"getting-started/directory-structure/#the-src-directory","text":"The src directory contains the source code of your application. See the section below for more detailed information.","title":"The src directory"},{"location":"getting-started/directory-structure/#the-templates-directory","text":"This directory contains all your template files.","title":"The templates directory"},{"location":"getting-started/directory-structure/#the-tests-directory","text":"The tests directory contains your phpunit tests.","title":"The tests directory"},{"location":"getting-started/directory-structure/#the-vendor-directory","text":"The vendor directory contains all installed composer dependencies.","title":"The vendor directory"},{"location":"getting-started/directory-structure/#source-src-directory","text":"This directory contains by default two directories: App and Admin . In most cases you will only work with App but in some cases you might want to add only Admin-relevant classes into the Admin directory. Every class inside the following directories is added automatically into the servicemanager as long the respectively interface is implemented.","title":"Source (src) directory"},{"location":"getting-started/directory-structure/#the-action-directory","text":"Available for App and Admin . Classes need to implement \\Psr\\Http\\Server\\MiddlewareInterface","title":"The Action directory"},{"location":"getting-started/directory-structure/#the-block-directory","text":"Available for App . Classes need to implement \\Ixocreate\\Cms\\Block\\BlockInterface","title":"The Block directory"},{"location":"getting-started/directory-structure/#the-console-directory","text":"Available for App and Admin . Classes need to implement \\Ixocreate\\Application\\Console\\CommandInterface","title":"The Console directory"},{"location":"getting-started/directory-structure/#the-image-directory","text":"Available for App . Classes need to implement \\Ixocreate\\Media\\ImageDefinitionInterface","title":"The Image directory"},{"location":"getting-started/directory-structure/#the-media-directory","text":"Available for App . Classes need to implement \\Ixocreate\\Media\\Handler\\HandlerInterface","title":"The Media directory"},{"location":"getting-started/directory-structure/#the-middleware-directory","text":"Available for App and Admin . Classes need to implement \\Psr\\Http\\Server\\MiddlewareInterface","title":"The Middleware directory"},{"location":"getting-started/directory-structure/#the-pagetype-directory","text":"Available for App . Classes need to implement \\Ixocreate\\Cms\\PageType\\PageTypeInterface","title":"The PageType directory"},{"location":"getting-started/directory-structure/#the-registry-directory","text":"Available for Admin . Classes need to implement \\Ixocreate\\Registry\\RegistryEntryInterface","title":"The Registry directory"},{"location":"getting-started/directory-structure/#the-repository-directory","text":"Available for App and Admin . Classes need to implement \\Ixocreate\\Database\\Repository\\RepositoryInterface","title":"The Repository directory"},{"location":"getting-started/directory-structure/#the-resource-directory","text":"Available for App and Admin . Classes need to implement \\Ixocreate\\Resource\\ResourceInterface","title":"The Resource directory"},{"location":"getting-started/directory-structure/#the-subscriber-directory","text":"Available for App . Classes need to implement \\Ixocreate\\Event\\Subscriber\\SubscriberInterface","title":"The Subscriber directory"},{"location":"getting-started/directory-structure/#the-type-directory","text":"Available for App and Admin . Classes need to implement \\Ixocreate\\Type\\TypeInterface","title":"The Type directory"},{"location":"getting-started/installation/","text":"Server Requirements To create a new IXOCREATE application make sure you have Composer installed on your machine and you are using PHP 7.1 or newer. PHP = 7.1 MySQL = 5.7 Webserver (Apache, NGNIX) PDO PHP Extension INTL PHP Extension JSON PHP Extension Tokenizer PHP Extension XML PHP Extension BCMath PHP Extension Installing Create a new project by running this command in your terminal: $ composer create-project ixocreate/ixocreate project_name $ cd project_name The directory data should be writable by your web server. Web server configuration You should configure your web server's document_root to be the public directory. The index.php in this directory serves as entering point for all HTTP requests. Via PHP's internal web server One way to develop your IXOCREATE application is to use PHP's internal web server. cd public php -S localhost:8000 Via Apache The minimum configuration to get your application running under Apache is: Options +FollowSymLinks -Indexes RewriteEngine On RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L] Via Nginx The minimum configuration to get your application running under Nginx is: location / { try_files $uri $uri/ /index.php?$query_string; } Project setup $ php ixocreate setup The setup console command will guide you through the basic settings needed to run the application. $ php ixocreate publish:run migration $ php ixocreate migration:migrate $ php ixocreate admin:create-user your_email admin","title":"Installation"},{"location":"getting-started/installation/#server-requirements","text":"To create a new IXOCREATE application make sure you have Composer installed on your machine and you are using PHP 7.1 or newer. PHP = 7.1 MySQL = 5.7 Webserver (Apache, NGNIX) PDO PHP Extension INTL PHP Extension JSON PHP Extension Tokenizer PHP Extension XML PHP Extension BCMath PHP Extension","title":"Server Requirements"},{"location":"getting-started/installation/#installing","text":"Create a new project by running this command in your terminal: $ composer create-project ixocreate/ixocreate project_name $ cd project_name The directory data should be writable by your web server.","title":"Installing"},{"location":"getting-started/installation/#web-server-configuration","text":"You should configure your web server's document_root to be the public directory. The index.php in this directory serves as entering point for all HTTP requests.","title":"Web server configuration"},{"location":"getting-started/installation/#via-phps-internal-web-server","text":"One way to develop your IXOCREATE application is to use PHP's internal web server. cd public php -S localhost:8000","title":"Via PHP's internal web server"},{"location":"getting-started/installation/#via-apache","text":"The minimum configuration to get your application running under Apache is: Options +FollowSymLinks -Indexes RewriteEngine On RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L]","title":"Via Apache"},{"location":"getting-started/installation/#via-nginx","text":"The minimum configuration to get your application running under Nginx is: location / { try_files $uri $uri/ /index.php?$query_string; }","title":"Via Nginx"},{"location":"getting-started/installation/#project-setup","text":"$ php ixocreate setup The setup console command will guide you through the basic settings needed to run the application. $ php ixocreate publish:run migration $ php ixocreate migration:migrate $ php ixocreate admin:create-user your_email admin","title":"Project setup"},{"location":"getting-started/page-type/","text":"Introduction A PageType describes what kind of information an editor has or can provide and displays them on a corresponding template. Moreover a PageTypes defines where a page can be located inside the sitemap tree. Some page types can be used only as root tree, others must be below a specific other page type. A basic PageType (for a Root Page) can look like this: declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class HomePageType implements PageTypeInterface, RootPageTypeInterface, HandlePageTypeInterface { public static function serviceName(): string { return 'home'; } public function label(): string { return 'Home'; } public function template(): string { return page::home ; } public function allowedChildren(): ?array { return []; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return (new Schema())- withElements([ $builder- create(TabbedGroupElement::class, 'tabs') - withElements([ $builder- create(GroupElement::class, 'content') - withLabel( Content ) - withElements([ $builder- create(BlockContainerElement::class, 'content') - withBlocks(['text']) ]) ]) ]); } }","title":"Create Page-Types"},{"location":"getting-started/page-type/#introduction","text":"A PageType describes what kind of information an editor has or can provide and displays them on a corresponding template. Moreover a PageTypes defines where a page can be located inside the sitemap tree. Some page types can be used only as root tree, others must be below a specific other page type. A basic PageType (for a Root Page) can look like this: declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class HomePageType implements PageTypeInterface, RootPageTypeInterface, HandlePageTypeInterface { public static function serviceName(): string { return 'home'; } public function label(): string { return 'Home'; } public function template(): string { return page::home ; } public function allowedChildren(): ?array { return []; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return (new Schema())- withElements([ $builder- create(TabbedGroupElement::class, 'tabs') - withElements([ $builder- create(GroupElement::class, 'content') - withLabel( Content ) - withElements([ $builder- create(BlockContainerElement::class, 'content') - withBlocks(['text']) ]) ]) ]); } }","title":"Introduction"},{"location":"getting-started/template/","text":"","title":"Templates"},{"location":"guides/cli/","text":"","title":"Command Line"},{"location":"guides/configuration/","text":"","title":"Configuration"},{"location":"guides/custom-admin/","text":"","title":"Custom admin"},{"location":"guides/deployment/","text":"","title":"Deployment"},{"location":"guides/packages/","text":"","title":"Packages"},{"location":"guides/performance/","text":"","title":"Performance"}]}