{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"IXOCREATE Documentation"},{"location":"getting-started/","text":"Setup Installing IXOCREATE To create a new IXOCREATE application make sure you have Composer installed on your machine and you are using PHP 7.1 or newer. Create a new project by running this command in your terminal: $ composer create-project ixocreate/ixocreate <project_name> $ cd <project_name> Configuration Directory permissions The directory data should be writable by your web server. Database Before you continue with the setup instruction publish all available migrations by running following in your terminal: php ixocreate publish:run migration Create a new database on your mysql server - you will need the database name and credentials later. Web server configuration You should configure your web server's document_root to be the public directory. The index.php in this directory serves as entering point for all HTTP requests. PHP's internal web server One way to develop your IXOCREATE application is to use PHP's internal web server. cd public php -S localhost:8000 Apache The minimum configuration to get your application running under Apache is: Options +FollowSymLinks -Indexes RewriteEngine On RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L] Nginx The minimum configuration to get your application running under Nginx is: location / { try_files $uri $uri/ /index.php?$query_string; } Project setup $ php ixocreate setup The setup console command will guide you through the basic settings needed to run the application. $ php ixocreate admin:create-user <your_email> admin Afterwards you can surf to the administration interface by surfing to <project_url>/admin Creating PageType HomePageType declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class HomePageType implements RootPageTypeInterface, HandlePageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'home'; } public function label(): string { return 'Home'; } public function template(): string { return \"page::home\"; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } } DefaultPageType declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class DefaultPageType implements RootPageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'default'; } public function label(): string { return 'Default'; } public function template(): string { return \"page::default\"; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } } Creating Block Templates","title":"Setup"},{"location":"getting-started/#setup","text":"","title":"Setup"},{"location":"getting-started/#installing-ixocreate","text":"To create a new IXOCREATE application make sure you have Composer installed on your machine and you are using PHP 7.1 or newer. Create a new project by running this command in your terminal: $ composer create-project ixocreate/ixocreate <project_name> $ cd <project_name>","title":"Installing IXOCREATE"},{"location":"getting-started/#configuration","text":"","title":"Configuration"},{"location":"getting-started/#directory-permissions","text":"The directory data should be writable by your web server.","title":"Directory permissions"},{"location":"getting-started/#database","text":"Before you continue with the setup instruction publish all available migrations by running following in your terminal: php ixocreate publish:run migration Create a new database on your mysql server - you will need the database name and credentials later.","title":"Database"},{"location":"getting-started/#web-server-configuration","text":"You should configure your web server's document_root to be the public directory. The index.php in this directory serves as entering point for all HTTP requests.","title":"Web server configuration"},{"location":"getting-started/#phps-internal-web-server","text":"One way to develop your IXOCREATE application is to use PHP's internal web server. cd public php -S localhost:8000","title":"PHP's internal web server"},{"location":"getting-started/#apache","text":"The minimum configuration to get your application running under Apache is: Options +FollowSymLinks -Indexes RewriteEngine On RewriteCond %{HTTP:Authorization} . RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.php [L]","title":"Apache"},{"location":"getting-started/#nginx","text":"The minimum configuration to get your application running under Nginx is: location / { try_files $uri $uri/ /index.php?$query_string; }","title":"Nginx"},{"location":"getting-started/#project-setup","text":"$ php ixocreate setup The setup console command will guide you through the basic settings needed to run the application. $ php ixocreate admin:create-user <your_email> admin Afterwards you can surf to the administration interface by surfing to <project_url>/admin","title":"Project setup"},{"location":"getting-started/#creating-pagetype","text":"","title":"Creating PageType"},{"location":"getting-started/#homepagetype","text":"declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class HomePageType implements RootPageTypeInterface, HandlePageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'home'; } public function label(): string { return 'Home'; } public function template(): string { return \"page::home\"; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } }","title":"HomePageType"},{"location":"getting-started/#defaultpagetype","text":"declare(strict_types=1); namespace App\\PageType; use Ixocreate\\Cms\\PageType\\PageTypeInterface; use Ixocreate\\Cms\\PageType\\HandlePageTypeInterface; use Ixocreate\\Cms\\PageType\\RootPageTypeInterface; use Ixocreate\\Schema\\Schema; use Ixocreate\\Contract\\Schema\\BuilderInterface; use Ixocreate\\Contract\\Schema\\SchemaInterface; final class DefaultPageType implements RootPageTypeInterface, PageTypeInterface { public static function serviceName(): string { return 'default'; } public function label(): string { return 'Default'; } public function template(): string { return \"page::default\"; } public function allowedChildren(): ?array { return ['default']; } public function provideSchema($name, BuilderInterface $builder, $options = []): SchemaInterface { return new Schema(); } }","title":"DefaultPageType"},{"location":"getting-started/#creating-block","text":"","title":"Creating Block"},{"location":"getting-started/#templates","text":"","title":"Templates"},{"location":"components/blocks/","text":"","title":"Blocks"},{"location":"components/cache/","text":"","title":"Cache"},{"location":"components/collection/","text":"","title":"Collection"},{"location":"components/command-bus/","text":"","title":"Command Bus"},{"location":"components/events/","text":"","title":"Events"},{"location":"components/page-types/","text":"","title":"Page Types"},{"location":"components/resources/","text":"","title":"Resources"},{"location":"components/schema/","text":"Introduction The schema is the bridge between the visual interface and internal types. It defines and structures elements. Form Schema Audio use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\AudioElement; /** @var BuilderInterface $builder */ $builder->create(AudioElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false) Block use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\BlockContainerElement; /** @var BuilderInterface $builder */ $builder->create(BlockContainerElement::class, 'name') ->withBlocks(['block1', 'block2']) ->withLimit(1); Checkbox use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CheckboxElement; /** @var BuilderInterface $builder */ $builder->create(CheckboxElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false) Collection use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CollectionElement; use Ixocreate\\Schema\\Elements\\ImageElement; use Ixocreate\\Schema\\Elements\\TextElement; /** @var BuilderInterface $builder */ $builder->create(CollectionElement::class, 'name') ->addCollectionElement( 'repeatable1', 'Repeatable1', (new Schema()) ->withAddedElement( $builder->create(ImageElement::class, 'image') ->withLabel('Image') ) ->withAddedElement( $builder->create(TextElement::class, 'text') ->withLabel('Text') ) ) ->addCollectionElement( 'repeatable2', 'Repeatable2', (new Schema()) ->withAddedElement( $builder->create(TextElement::class, 'text') ->withLabel('Text') ) ); Color use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\ColorElement; /** @var BuilderInterface $builder */ $builder->create(ColorElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false) Date use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateElement; /** @var BuilderInterface $builder */ $builder->create(DateElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false) DateTime use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateTimeElement; /** @var BuilderInterface $builder */ $builder->create(DateTimeElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false) Document use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DocumentElement; /** @var BuilderInterface $builder */ $builder->create(DocumentElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false) Group Html Image Link Map Media Multicheckbox Multiselect Number Price Radio Schema Section Select Tabbed Groups Textarea Text Video YouTube List Schema Checkbox Date DateTime Media Select Text","title":"Schema"},{"location":"components/schema/#introduction","text":"The schema is the bridge between the visual interface and internal types. It defines and structures elements.","title":"Introduction"},{"location":"components/schema/#form-schema","text":"","title":"Form Schema"},{"location":"components/schema/#audio","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\AudioElement; /** @var BuilderInterface $builder */ $builder->create(AudioElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false)","title":"Audio"},{"location":"components/schema/#block","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\BlockContainerElement; /** @var BuilderInterface $builder */ $builder->create(BlockContainerElement::class, 'name') ->withBlocks(['block1', 'block2']) ->withLimit(1);","title":"Block"},{"location":"components/schema/#checkbox","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CheckboxElement; /** @var BuilderInterface $builder */ $builder->create(CheckboxElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false)","title":"Checkbox"},{"location":"components/schema/#collection","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\CollectionElement; use Ixocreate\\Schema\\Elements\\ImageElement; use Ixocreate\\Schema\\Elements\\TextElement; /** @var BuilderInterface $builder */ $builder->create(CollectionElement::class, 'name') ->addCollectionElement( 'repeatable1', 'Repeatable1', (new Schema()) ->withAddedElement( $builder->create(ImageElement::class, 'image') ->withLabel('Image') ) ->withAddedElement( $builder->create(TextElement::class, 'text') ->withLabel('Text') ) ) ->addCollectionElement( 'repeatable2', 'Repeatable2', (new Schema()) ->withAddedElement( $builder->create(TextElement::class, 'text') ->withLabel('Text') ) );","title":"Collection"},{"location":"components/schema/#color","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\ColorElement; /** @var BuilderInterface $builder */ $builder->create(ColorElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false)","title":"Color"},{"location":"components/schema/#date","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateElement; /** @var BuilderInterface $builder */ $builder->create(DateElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false)","title":"Date"},{"location":"components/schema/#datetime","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DateTimeElement; /** @var BuilderInterface $builder */ $builder->create(DateTimeElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false)","title":"DateTime"},{"location":"components/schema/#document","text":"use Ixocreate\\Schema\\BuilderInterface; use Ixocreate\\Schema\\Elements\\DocumentElement; /** @var BuilderInterface $builder */ $builder->create(DocumentElement::class, 'name') ->withLabel(\"Title\") ->withDescription(\"Description\") ->withRequired(true) ->withDisabled(false)","title":"Document"},{"location":"components/schema/#group","text":"","title":"Group"},{"location":"components/schema/#html","text":"","title":"Html"},{"location":"components/schema/#image","text":"","title":"Image"},{"location":"components/schema/#link","text":"","title":"Link"},{"location":"components/schema/#map","text":"","title":"Map"},{"location":"components/schema/#media","text":"","title":"Media"},{"location":"components/schema/#multicheckbox","text":"","title":"Multicheckbox"},{"location":"components/schema/#multiselect","text":"","title":"Multiselect"},{"location":"components/schema/#number","text":"","title":"Number"},{"location":"components/schema/#price","text":"","title":"Price"},{"location":"components/schema/#radio","text":"","title":"Radio"},{"location":"components/schema/#schema","text":"","title":"Schema"},{"location":"components/schema/#section","text":"","title":"Section"},{"location":"components/schema/#select","text":"","title":"Select"},{"location":"components/schema/#tabbed-groups","text":"","title":"Tabbed Groups"},{"location":"components/schema/#textarea","text":"","title":"Textarea"},{"location":"components/schema/#text","text":"","title":"Text"},{"location":"components/schema/#video","text":"","title":"Video"},{"location":"components/schema/#youtube","text":"","title":"YouTube"},{"location":"components/schema/#list-schema","text":"","title":"List Schema"},{"location":"components/schema/#checkbox_1","text":"","title":"Checkbox"},{"location":"components/schema/#date_1","text":"","title":"Date"},{"location":"components/schema/#datetime_1","text":"","title":"DateTime"},{"location":"components/schema/#media_1","text":"","title":"Media"},{"location":"components/schema/#select_1","text":"","title":"Select"},{"location":"components/schema/#text_1","text":"","title":"Text"},{"location":"components/servicemanager/","text":"","title":"Servicemanager"},{"location":"concept/request-lifecycle/","text":"","title":"Request Lifecycle"},{"location":"concept/types/","text":"","title":"Types"},{"location":"getting-started/block/","text":"","title":"Create Blocks"},{"location":"getting-started/directory-structure/","text":"","title":"Directory Structure"},{"location":"getting-started/installation/","text":"","title":"Installation"},{"location":"getting-started/page-type/","text":"","title":"Create PageTypes"},{"location":"getting-started/template/","text":"","title":"Templates"},{"location":"guides/cli/","text":"","title":"Command Line"},{"location":"guides/configuration/","text":"","title":"Configuration"},{"location":"guides/custom-admin/","text":"","title":"Custom admin"},{"location":"guides/deployment/","text":"","title":"Deployment"},{"location":"guides/packages/","text":"","title":"Packages"},{"location":"guides/performance/","text":"","title":"Performance"}]}